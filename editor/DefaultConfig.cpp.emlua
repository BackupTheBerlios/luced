/////////////////////////////////////////////////////////////////////////////////////
//
//   LucED - The Lucid Editor
//
//   Copyright (C) 2005-2009 Oliver Schmidt, oliver at luced dot de
//
//   This program is free software; you can redistribute it and/or modify it
//   under the terms of the GNU General Public License Version 2 as published
//   by the Free Software Foundation in June 1991.
//
//   This program is distributed in the hope that it will be useful, but WITHOUT
//   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
//   more details.
//
//   You should have received a copy of the GNU General Public License along with 
//   this program; if not, write to the Free Software Foundation, Inc., 
//   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//
/////////////////////////////////////////////////////////////////////////////////////

#include "DefaultConfig.hpp"
#include "System.hpp"

@ local stringLiteral = require("functions").stringLiteral

using namespace LucED;

namespace // anonymous
{

static const int NUMBER_ROOT_CONFIG_FILES            = @(#ROOT_CONFIG_FILES);
static const int NUMBER_DEFAULT_PACKAGE_CONFIG_FILES = @(#DEFAULT_PACKAGE_CONFIG_FILES);

struct DefaultConfigEntry
{
    const char* fileName;
    const char* fileContent;
};

@ local function buildConfigEntries(fileNames)
@   for i = 1, #fileNames do
@     local fileName = fileNames[i]
    {
        @(stringLiteral(fileName)),
@  
@     for line in io.lines(".luced/"..fileName) do
        @(stringLiteral(line.."\n"))
@     end
    }
    @(i < #fileNames and "," or "")
@   end
@ end

static DefaultConfigEntry rootConfigEntries[NUMBER_ROOT_CONFIG_FILES] =
{
    @(buildConfigEntries(ROOT_CONFIG_FILES))
};

static DefaultConfigEntry defaultPackageConfigEntries[NUMBER_DEFAULT_PACKAGE_CONFIG_FILES] =
{
    @(buildConfigEntries(DEFAULT_PACKAGE_CONFIG_FILES))
};

} // anonymous namespace


File DefaultConfig::getCreatedConfigDirectory()
{
    File configDirectory(".luced");
    
    if (!configDirectory.exists()) {
        String homeDirectory = System::getInstance()->getHomeDirectory();
        configDirectory = File(homeDirectory, ".luced");
    }
    if (!configDirectory.exists())
    {
        configDirectory.createDirectory();
    }
    return configDirectory;
}

void DefaultConfig::createMissingConfigFiles()
{
    File configDirectory = getCreatedConfigDirectory();

    for (int i = 0; i < NUMBER_ROOT_CONFIG_FILES; ++i)
    {
        File thisFile(configDirectory, rootConfigEntries[i].fileName);
        
        if (!thisFile.exists()) {
            thisFile.getDir().createDirectory();
            thisFile.storeData(rootConfigEntries[i].fileContent);
        }
    }
}


File DefaultConfig::writeCopyOfDefaultConfigFiles()
{
    File configDirectory = getCreatedConfigDirectory();

    for (int counter = 1; true; ++counter)
    {
        File cloneDir(configDirectory, String() << "default-" << counter);

        if (!cloneDir.exists())
        {
            for (int i = 0; i < NUMBER_DEFAULT_PACKAGE_CONFIG_FILES; ++i)
            {
                String pseudoName = defaultPackageConfigEntries[i].fileName;
                ASSERT(pseudoName.startsWith("default/"));
                int p = pseudoName.findFirstOf('/');
                File thisFile(cloneDir, pseudoName.getTail(p + 1));
                thisFile.getDir().createDirectory();
                thisFile.storeData(defaultPackageConfigEntries[i].fileContent);
            }
            return cloneDir;
        }
    }
}


const char* DefaultConfig::getDefaultModule(const String& pseudoFileName)
{
    for (int i = 0; i < NUMBER_DEFAULT_PACKAGE_CONFIG_FILES; ++i)
    {
        if (defaultPackageConfigEntries[i].fileName == pseudoFileName)
        {
            return defaultPackageConfigEntries[i].fileContent;
        }
    }
    for (int i = 0; i < NUMBER_ROOT_CONFIG_FILES; ++i)
    {
        if (rootConfigEntries[i].fileName == pseudoFileName)
        {
            return rootConfigEntries[i].fileContent;
        }
    }
    return NULL;
}

