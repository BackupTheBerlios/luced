/////////////////////////////////////////////////////////////////////////////////////
//
//   LucED - The Lucid Editor
//
//   Copyright (C) 2005-2008 Oliver Schmidt, oliver at luced dot de
//
//   This program is free software; you can redistribute it and/or modify it
//   under the terms of the GNU General Public License Version 2 as published
//   by the Free Software Foundation in June 1991.
//
//   This program is distributed in the hope that it will be useful, but WITHOUT
//   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
//   more details.
//
//   You should have received a copy of the GNU General Public License along with 
//   this program; if not, write to the Free Software Foundation, Inc., 
//   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//
/////////////////////////////////////////////////////////////////////////////////////

@ local actions   = require("BuiltinActionDefinitions")
@ local functions = require("functions")

#include "ActionId.hpp"
#include "ActionIdRegistry.hpp"

using namespace LucED;

const int ActionId::MAX_BUILTIN;

void ActionId::setBuiltinMappingInto(HashMap<String, ActionId>& nameToIdMap,
                                     HashMap<ActionId, String>& idToNameMap)
{
@ for i, a in ipairs(actions) do
    nameToIdMap.set("builtin.@(a.name)", @(functions.upperize(a.name)));
    idToNameMap.set(@(functions.upperize(a.name)), "builtin.@(a.name)");
@ end
}

String ActionId::toString() const
{
    if (isBuiltin())
    {
        switch (value)
        {
@ for i, a in ipairs(actions) do
            case @(functions.upperize(a.name)): return "builtin.@(a.name)";
@ end
            case UNDEFINED:
            default:                            return "undefined";
        }
    }
    else
    {
        return ActionIdRegistry::getInstance()->toString(*this);
    }
}

