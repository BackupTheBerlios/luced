/////////////////////////////////////////////////////////////////////////////////////
//
//   LucED - The Lucid Editor
//
//   Copyright (C) 2005-2010 Oliver Schmidt, oliver at luced dot de
//
//   This program is free software; you can redistribute it and/or modify it
//   under the terms of the GNU General Public License Version 2 as published
//   by the Free Software Foundation in June 1991.
//
//   This program is distributed in the hope that it will be useful, but WITHOUT
//   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
//   more details.
//
//   You should have received a copy of the GNU General Public License along with 
//   this program; if not, write to the Free Software Foundation, Inc., 
//   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//
/////////////////////////////////////////////////////////////////////////////////////

#ifndef CONFIG_DATA_HPP
#define CONFIG_DATA_HPP

#include "HeapObject.hpp"
#include "OwningPtr.hpp"
#include "LuaVar.hpp"
#include "String.hpp"
#include "ObjectArray.hpp"
#include "BasicRegex.hpp"
#include "Nullable.hpp"

namespace LucED
{
@ local functions  = require("functions")
@ local cap        = functions.capitalize
@
@ local typeInfos  = require("ConfigTypes").typeInfos
@
@ local configDef  = require("ConfigDefinition")

class ConfigData : public HeapObject
{
public:
    typedef OwningPtr<ConfigData> Ptr;

    static Ptr create() {
        return Ptr(new ConfigData());
    }
    
    void readConfig(LuaVar luaData);
@
@ local elementCode
@
@ local function classConstructor(class, c)
@   if typeInfos[c.type].isStructure then
        @(class)();
@   end
@ end
@
@ local function innerClass(c)
@   local class = cap(c.name)
@----------------------------------------------------------------------- 
public:
    class @(class) : public HeapObject
    {
    public:
        typedef OwningPtr<@(class)> Ptr;
        static Ptr create() {
            return Ptr(new @(class)());
        }
@       emluaAddIndent(4)
@       elementCode(c)
@       emluaAddIndent(-4)

        void readConfig(LuaVar luaData);

    private:
@       classConstructor(class, c)
    };
@----------------------------------------------------------------------- 
@ end
@
@
@ elementCode = function(c)
@   if c.type == "map" then
@       assert(c.entries and #c.entries > 0, "no entries in map '"..(c.name or "???").."'")
@       for _, e in ipairs(c.entries) do
@           if e.type == "map" or e.type == "list" then
@               local class = cap(e.name)
@               innerClass(e)
@----------------------------------------------------------------------- 
private:
    OwningPtr<@(class)> @(e.name);
public:
    @(class)::Ptr get@(cap(e.name))() const {
        return @(e.name);
    }
@----------------------------------------------------------------------- 
@           else
@----------------------------------------------------------------------- 
private:
    @(e.type) @(e.name);
public:
    @(e.type) get@(cap(e.name))() const {
        return @(e.name);
    }
    void set@(cap(e.name))(const @(e.type)& value) {
        this->@(e.name) = value;
    }
@----------------------------------------------------------------------- 
@           end
@       end
@   elseif c.type == "list" then
@       local e = c.member
@       if e.type == "map" or e.type == "list" or e.type == "alternative" then
@           local class = cap(c.member.name)
@           innerClass(c.member)
@----------------------------------------------------------------------- 
private:
    ObjectArray< OwningPtr<@(class)> > @(c.name);
public:
    int getLength() const {
        return @(c.name).getLength();
    }
    @(class)::Ptr get(int i) const {
        return @(c.name)[i];
    }
@----------------------------------------------------------------------- 
@       else
@----------------------------------------------------------------------- 
private:
    ObjectArray< @(e.type) > @(c.name);
public:
    int getLength() const {
        return @(c.name).getLength();
    }
    @(e.type) get(int i) const {
        return @(c.name)[i];
    }
@----------------------------------------------------------------------- 
@       end
@   elseif c.type == "alternative" then
@       for _, a in ipairs(c.alternatives) do
@           local class = cap(a.name)
@           innerClass(a)
private:
    OwningPtr<@(class)> @(a.name);
public:
    bool is@(class)() const {
        return @(a.name).isValid();
    }
    @(class)::Ptr get@(class)() const {
        return @(a.name);
    }
    void set@(class)(OwningPtr<@(class)> newValue) {
@       for _, a2 in ipairs(c.alternatives) do
@           if a2 == a then
        @(a.name) = newValue;
@           else
        @(a2.name).invalidate();
@           end
@       end    
    }
@       end
@   end
@ end
@
@ elementCode(configDef)
    
private:
@   classConstructor("ConfigData", configDef)
};

} // namespace LucED

#endif // CONFIG_DATA_HPP
