/////////////////////////////////////////////////////////////////////////////////////
//
//   LucED - The Lucid Editor
//
//   Copyright (C) 2005-2010 Oliver Schmidt, oliver at luced dot de
//
//   This program is free software; you can redistribute it and/or modify it
//   under the terms of the GNU General Public License Version 2 as published
//   by the Free Software Foundation in June 1991.
//
//   This program is distributed in the hope that it will be useful, but WITHOUT
//   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
//   more details.
//
//   You should have received a copy of the GNU General Public License along with 
//   this program; if not, write to the Free Software Foundation, Inc., 
//   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//
/////////////////////////////////////////////////////////////////////////////////////

#include "ConfigData.hpp"
#include "LuaIterator.hpp"
#include "ConfigException.hpp"
#include "RegexException.hpp"

using namespace LucED;

@ local functions  = require("functions")
@ local cap        = functions.capitalize
@ local ser        = functions.serialize
@ local gsub       = string.gsub
@
@ local typeInfos  = require("ConfigTypes").typeInfos
@
@ local configDef     = require("ConfigDefinition")
@ local defaultConfig = dofile(CONFIG_LUA_FILE) -- ".luced/config.lua")
@ 
@ local function path(p1, p2)
@   return (#p1 > 0 and #p2 > 0 and p2:sub(1,1) ~= "[" and p1.."/"..p2) or (p1..p2)
@ end
@
@
@
@
@ local function classMethods(c, classPath, defaultValues, defaultIndex, luaConfigPath)
@   local constructorMembers = {} 
@   local elements = {}
@   local class
@   if c.type == "map" then
@       class = cap(c.name)
@       elements = c.entries
@       constructorMembers = c.entries
@   elseif c.type == "list" then
@       class = cap(c.name)
@       elements = { c.member }
@   elseif c.type == "alternative" then
@       class = cap(c.name)
@       elements = c.alternatives
@   end
@   if class then


/**
 * Constructor for @(luaConfigPath)
 */
@(classPath)@(cap(c.name))()
@       if #constructorMembers > 0 then
    :
@           for i, m in ipairs(constructorMembers) do
@               local typeInfo = typeInfos[m.type]
@               local comma = (i == #constructorMembers) and "" or ","
@               local defaultValue = defaultValues and defaultValues[m.name]
@               if defaultValue ~= nil and m.default ~= nil 
@                  and tostring(defaultValue) ~= tostring(m.default)
@               then
@                   error("different default values: in config.lua and in ConfigDefinition.lua for "..luaConfigPath.."/"..m.name)
@               end
@               if m.default == nil and defaultValue ~= nil then m.default = defaultValue end
@               if defaultValue == nil then defaultValue = m.default end
@               if m.type == "map" or m.type == "list" or m.type == "alternative" then
@                       local eClass = cap(m.name)
                    @(m.name)(@(eClass)::create())@(comma)
@               elseif defaultValue ~= nil then
                    @(m.name)(@(typeInfo.literal(defaultValue)))@(comma)
@               elseif typeInfo.defaultValue then
                    @(m.name)(@(typeInfo.defaultValue))@(comma)
@               else
@                   error("No default value for "..luaConfigPath.."/"..m.name)
@               end
@           end
@       end
{}

/**
 *
 */
void @(classPath)readConfig(LuaVar luaData)
{
@ if c.type == "list" and defaultValues then
    if (!luaData.isValid())
    {
        LuaAccess luaAccess = luaData.getLuaAccess();
        static const char* defaultValueScript = "return @(gsub(ser(defaultValues), '(["\\])', '\\%1'))";
        LuaAccess::Result rslt = luaAccess.executeScript(defaultValueScript, strlen(defaultValueScript));
        if (rslt.objects.getLength() > 0) {
            luaData = rslt.objects[0];
        }
    }
@ end
    if (luaData.isValid())
    {
        if (!luaData.isTable()) {
            throw ConfigException(String() << "Error: @(luaConfigPath) must be table, but is "
                                           << luaData.getTypeName());
        }
@   if c.type == "map" then
@       assert(c.entries and #c.entries > 0, "no entries in map '"..(c.name or "???").."'")
@       if defaultIndex then
        {
@           local indexField = defaultIndex.indexField
@           local indexMap   = defaultIndex.indexMap
            // TODO
            LuaAccess luaAccess = luaData.getLuaAccess();
            static const char* defaultValueScript = "return @(gsub(ser(indexMap), '"', '\\"'))";
            LuaAccess::Result rslt = luaAccess.executeScript(defaultValueScript, strlen(defaultValueScript));
            if (rslt.objects.getLength() > 0) {
                LuaVar indexMap      = rslt.objects[0];
                LuaVar index         = luaData["@(indexField)"];
                LuaVar defaultValues = indexMap[index];
                if (defaultValues.isValid())
                {
                    for (LuaIterator i(luaAccess, 0); i.in(defaultValues); ++i)
                    {
                        if (!luaData[i.key()].isValid()) {
                            luaData[i.key()] = i.value();
                        }
                    }
                }
            }
        }
@       end
@       local luaVarDecl = "LuaVar "
@       for _, e in ipairs(c.entries) do
@           if e.type == "map" or e.type == "list" or e.type == "alternative" then
        this->@(e.name)->readConfig(luaData["@(e.name)"]);
@           else
        @(luaVarDecl)luaVar = luaData["@(e.name)"];
@               if #luaVarDecl > 0 then
@                   luaVarDecl = ""
@               end
@               local typeInfo = typeInfos[e.type]
@               if not typeInfo.isNullable then
        if (luaVar.isValid()) {
@               end
@               if typeInfo.convertException then
            try {
@               end
            this->@(e.name) = @(typeInfo.convert("luaVar"));
@               if typeInfo.convertException then
            } catch (@(typeInfo.convertException)& ex) {
                throw ConfigException(String() << "Error: @(luaConfigPath) invalid value for @(e.name): "
                                               << ex.getMessage());
            }
@               end
@               if not typeInfo.isNullable and e.default == nil then            
        } else {
            throw ConfigException(String() << "Error: @(luaConfigPath) missing value for @(e.name)");
@               end
@               if not typeInfo.isNullable then
        }
@               end
@           end
@       end
@   elseif c.type == "list" then
@       local e = c.member
        this->@(c.name).clear();
        LuaAccess luaAccess = luaData.getLuaAccess();
        LuaVar luaVar(luaAccess);
        for (int i = 0; luaVar = luaData[i + 1], luaVar.isValid(); ++i)
        {
@           if e.type == "map" or e.type == "list" or e.type == "alternative" then
            @(cap(e.name))::Ptr ptr = @(cap(e.name))::create();
            ptr->readConfig(luaVar);
            this->@(c.name).append(ptr);
@           else
            if (luaVar.isValid()) {
@               local typeInfo = typeInfos[e.type]
@               if typeInfo.convertException then
                try {
@               end
                this->@(c.name).append(@(typeInfo.convert("luaVar")));
@               if typeInfo.convertException then
                } catch (@(typeInfo.convertException)& ex) {
                    throw ConfigException(String() << "Error: @(luaConfigPath) invalid value for @(e.name): "
                                                   << ex.getMessage());
                }
@               end
@               if not e.default then            
            } else {
                throw ConfigException(String() << "Error: @(luaConfigPath) missing value for @(e.name)");
@               end
            }
@           end
        }
@   elseif c.type == "alternative" then
@       assert(c.alternatives and #c.alternatives > 0, "no entries in alternatives '"..(c.name or "???").."'")
@       for _, a in ipairs(c.alternatives) do
        this->@(a.name).invalidate();
@       end
        do
        {
@       local alternatives = {}
@       for i, a in ipairs(c.alternatives) do
@           assert(a.type == "map", "alternative "..a.name.." must be of type 'map'")
@           local firstEntry = assert(a.entries[1], "alternative "..a.name.." must have entries")
@           alternatives[#alternatives+1] = "'"..firstEntry.name.."'"
            if (luaData["@(firstEntry.name)"].isValid())
            {
                this->@(a.name) = @(cap(a.name))::create();
                this->@(a.name)->readConfig(luaData);
                break;
            }
@       end
            throw ConfigException(String() << "Error: @(luaConfigPath) entry must have one field with name: @(table.concat(alternatives, ' or '))");
        } while (false);
@   end
    }
}
@
@       if c.type == "map" then
@           for _, e in ipairs(c.entries) do
@               classMethods(e, classPath..cap(e.name).."::", 
@                            defaultValues and defaultValues[e.name], nil, path(luaConfigPath, e.name))
@           end
@       elseif c.type == "list" then
@           local nextIndex
@           if c.index then
@               nextIndex = { indexField = c.index, indexMap = {} }
@               local indexMap = nextIndex.indexMap
@               local idField = c.index
@               assert(defaultValues, "default config values are needed for "..luaConfigPath)
@               for i, v in ipairs(defaultValues) do
@                   local id = v[idField]
@                   if id and not indexMap[id] then
@                       indexMap[id] = v
@                   end
@               end
@           end
@           local m = c.member
@           classMethods(m, classPath..cap(m.name).."::", 
@                        nil, nextIndex, luaConfigPath)
@       elseif c.type == "alternative" then
@           for _, a in ipairs(c.alternatives) do
@               local nextIndex
@               if defaultIndex then
@                   local f = defaultIndex.indexField
@                   for _,e in pairs(a.entries or {}) do
@                       if e.name == f then
@                           nextIndex = defaultIndex
@                           break
@                       end
@                   end
@               end
@               classMethods(a, classPath..cap(a.name).."::", 
@                            defaultValues, nextIndex, luaConfigPath)
@           end
@       end
@   end
@ end
@
@
@ classMethods(configDef, "ConfigData::", defaultConfig, nil, "")
